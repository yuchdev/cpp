Linking. External declarations.
C-style linkage. Linkage and function pointers.
One definition rule. Header guards.

Linkage types
1. Internal linkage, in which case they refer only to program elements inside their own translation units; 
they are not shared with other translation units.
The same name in another translation unit may refer to a different object or a different class.

// The static keyword ensures internal linkage.
static int i;   

2. External linkage, in which case they can refer to program elements 
in any translation unit in the program — the program element is shared among the translation units.

namespace{
	int i;
}
// "i" has external linkage.
// Even though "i" is not visible outside the compilation unit, 
// it still has external linkage (C++11 Standard 7.3.1.1/1 - See footnote).

3. No linkage, in which case they refer to unique entities. 
The following kinds of identifiers have no linkage:
* Names that have neither external or internal linkage
* Names declared in local scopes (with exceptions like certain entities declared with the extern keyword)
* Identifiers that do not represent an object or a function, including labels, enumerators, typedef names

C supports four different kinds of scope: 
file scope, block scope, function prototype scope, and function scope. 
C++ generalizes file scope into namespace scope, and adds class scope.

A name’s linkage affects whether two or more declarations for that name are valid, 
and if so, whether they refer to the same entity (such as a function or an object). 
Understanding linkage clears up a number of misconceptions about the behavior of C and C++ programs.

The One Definition Rule (ODR) is an important rule of the C++ programming language 
that prescribes that objects and non-inline functions cannot have more than one definition 
in the entire program and template and types cannot have more than one definition by translation unit.

Keyword static is being used in two contexts. With the class member it means static member,
with global variable it means internal linkage. In fact, it plays non-existent keyword 'intern'
Glocal const variable is always static.

C++ implicitly treats any const namespace-scope variable as having internal linkage 
unless it is explicitly declared extern, unlike C.

* Use #include directive in global scope only
* #pragma once is a more effective header guard than #ifdef-guard, and de-facto supported is all compilers
* Try to create self-sufficient headers
* There no guaranteed order of global variables initialization within application. Consider singleton functions instead.

extern "C"specifies that the linkage conventions of plain C are being used for the declarator. 
C functions and data can be accessed only if they're previously declared as having C linkage. 
However, they must be defined in a separately compiled translation unit
If a function has more than one linkage specification, they must agree. 
It's an error to declare functions as having both C and C++ linkage.

__cplusplus compiler option enables the __cplusplus preprocessor macro 
to report an updated value for recent C++ language standards support
If its' defined, we are in C++ code

